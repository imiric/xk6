# Used as inspiration: https://github.com/mvdan/github-actions-golang

name: Cross-Platform Tests

on:
  push:
    branches:
      - master
      - feat/docker-image-publish
  pull_request:
    branches:
      - master

env:
  DOCKER_IMAGE_REPOSITORY: ${{ github.repository }}

jobs:
  test:
    strategy:
      # Default is true, cancels jobs for other platforms in the matrix if one fails
      fail-fast: false
      matrix:
        # os: [ ubuntu-latest, macos-latest, windows-latest ]
        # go-version: [ 1.18.x, 1.19.x ]
        go-version: [ 1.19.x ]

        # Set some variables per OS, usable via ${{ matrix.VAR }}
        # XK6_BIN_PATH: the path to the compiled k6 binary, for artifact publishing
        # SUCCESS: the typical value for $? per OS (Windows/pwsh returns 'True')
        # include:
        # - os: ubuntu-latest
        #   XK6_BIN_PATH: ./cmd/xk6/xk6
        #   SUCCESS: 0

        # - os: macos-latest
        #   XK6_BIN_PATH: ./cmd/xk6/xk6
        #   SUCCESS: 0

        # - os: windows-latest
        #   XK6_BIN_PATH: ./cmd/xk6/xk6.exe
        #   SUCCESS: 'True'

    # runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.vars.outputs.short_sha }}

    steps:
    # - name: Install Go
    #   uses: actions/setup-go@v3
    #   with:
    #     go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Print Go version and environment
      id: vars
      shell: bash
      run: |
        printf "Using go at: $(which go)\n"
        printf "Go version: $(go version)\n"
        printf "\n\nGo environment:\n\n"
        go env
        printf "\n\nSystem environment:\n\n"
        env
        # Calculate the short SHA1 hash of the git commit
        echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "go_cache=$(go env GOCACHE)" >> $GITHUB_OUTPUT

    # - name: Cache the build cache
    #   uses: actions/cache@v3
    #   with:
    #     path: ${{ steps.vars.outputs.go_cache }}
    #     key: ${{ runner.os }}-go-ci-${{ hashFiles('**/go.sum') }}
    #     restore-keys: |
    #       ${{ runner.os }}-go-ci

    # - name: Get dependencies
    #   run: |
    #     go get -v -t -d ./...

    # - name: Build xk6
    #   working-directory: ./cmd/xk6
    #   env:
    #     CGO_ENABLED: 0
    #   run: |
    #     go build -trimpath -ldflags="-w -s" -v

    # - name: Publish Build Artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: xk6_${{ runner.os }}_${{ steps.vars.outputs.short_sha }}
    #     path: ${{ matrix.XK6_BIN_PATH }}

    # - name: Run tests
    #   run: |
    #     go test -v -coverprofile="cover-profile.out" -short -race ./...

  # golangci-lint:
  #   name: runner / golangci-lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Install Go
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: 1.19.x
  #         check-latest: true
  #     - name: Retrieve golangci-lint version
  #       run: |
  #         echo "Version=$(head -n 1 "${GITHUB_WORKSPACE}/.golangci.yml" | tr -d '# ')" >> $GITHUB_OUTPUT
  #       id: version
  #     - name: golangci-lint
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         version: ${{ steps.version.outputs.Version }}

  docker:
    runs-on: ubuntu-latest
    needs: [test]
    env:
      VERSION: ${{ needs.test.outputs.short_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build image
        run: docker build --build-arg "XK6_VERSION=${VERSION}" -t "$DOCKER_IMAGE_REPOSITORY" .
      - name: Build k6 binary
        run: |
            docker run --rm -u "$(id -u):$(id -g)" -v "$PWD:/xk6" \
              "$DOCKER_IMAGE_REPOSITORY" build master \
              --with github.com/mostafa/xk6-kafka \
              --with github.com/grafana/xk6-output-influxdb
      - name: Check k6 binary
        run: |
            ./k6 version
            ./k6 version | grep -qz 'xk6-output-influxdb.*xk6-kafka'

      # - name: Log into ghcr.io
      #   if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
      #   run: |
      #     # Log into GitHub Container Registry
      #     echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      # - name: Publish k6:master image to ghcr.io
      #   if: ${{ github.ref == 'refs/heads/master' }}
      #   run: |
      #     echo "Publish as ghcr.io/$GHCR_IMAGE_ID:$VERSION"
      #     docker tag "$DOCKER_IMAGE_ID" "ghcr.io/$GHCR_IMAGE_ID:master"
      #     docker push "ghcr.io/$GHCR_IMAGE_ID:master"
      # - name: Publish tagged version image to ghcr.io
      #   if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      #   run: |
      #     VERSION="${VERSION#v}"
      #     echo "Publish as ghcr.io/$GHCR_IMAGE_ID:$VERSION"
      #     docker tag "$DOCKER_IMAGE_ID" "ghcr.io/$GHCR_IMAGE_ID:$VERSION"
      #     docker push "ghcr.io/$GHCR_IMAGE_ID:$VERSION"
      #     # We also want to tag the latest stable version as latest
      #     if [[ ! "$VERSION" =~ (RC|rc) ]]; then
      #       echo "Publish as ghcr.io/$GHCR_IMAGE_ID:latest"
      #       docker tag "$DOCKER_IMAGE_ID" "ghcr.io/$GHCR_IMAGE_ID:latest"
      #       docker push "ghcr.io/$GHCR_IMAGE_ID:latest"
      #     fi

      # - name: Log into Docker Hub
      #   if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
      #   run: |
      #     # Log into Docker Hub Registry
      #     echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
      # - name: Publish k6:master image to Docker Hub
      #   if: ${{ github.ref == 'refs/heads/master' }}
      #   run: |
      #     echo "Publish to Docker Hub as $DOCKER_IMAGE_ID:master and $LI_DOCKER_IMAGE_ID:master"
      #     docker tag "$DOCKER_IMAGE_ID" "$DOCKER_IMAGE_ID:master"
      #     docker tag "$DOCKER_IMAGE_ID" "$LI_DOCKER_IMAGE_ID:master"
      #     docker push "$DOCKER_IMAGE_ID:master"
      #     docker push "$LI_DOCKER_IMAGE_ID:master"
      # - name: Publish tagged version image to Docker Hub
      #   if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      #   run: |
      #     # We need to push the same image in both the loadimpact and the grafana docker hub orgs
      #     VERSION="${VERSION#v}"
      #     echo "Publish to Docker Hub as $DOCKER_IMAGE_ID:$VERSION and $LI_DOCKER_IMAGE_ID:$VERSION"
      #     docker tag "$DOCKER_IMAGE_ID" "$DOCKER_IMAGE_ID:$VERSION"
      #     docker tag "$DOCKER_IMAGE_ID" "$LI_DOCKER_IMAGE_ID:$VERSION"
      #     docker push "$DOCKER_IMAGE_ID:$VERSION"
      #     docker push "$LI_DOCKER_IMAGE_ID:$VERSION"
      #     # We also want to tag the latest stable version as latest
      #     if [[ ! "$VERSION" =~ (RC|rc) ]]; then
      #       echo "Publish to Docker Hub as $DOCKER_IMAGE_ID:latest and $LI_DOCKER_IMAGE_ID:latest"
      #       docker tag "$DOCKER_IMAGE_ID" "$DOCKER_IMAGE_ID:latest"
      #       docker tag "$DOCKER_IMAGE_ID" "$LI_DOCKER_IMAGE_ID:latest"
      #       docker push "$DOCKER_IMAGE_ID:latest"
      #       docker push "$LI_DOCKER_IMAGE_ID:latest"
      #     fi

  # goreleaser-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3
  #     - uses: goreleaser/goreleaser-action@v4
  #       with:
  #         version: v1.13.1
  #         args: check
  #       env:
  #         TAG: ${{ steps.vars.outputs.short_sha }}

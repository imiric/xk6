name: Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'

jobs:
  release:
    name: Release GitHub
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        go-version: [ 1.19.x ]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}

    - name: Checkout code
      uses: actions/checkout@v3

    # So GoReleaser can generate the changelog properly
    - name: Unshallowify the repo clone
      run: git fetch --prune --unshallow

    - name: Print Go version and environment
      id: vars
      shell: bash
      run: |
        printf "Using go at: $(which go)\n"
        printf "Go version: $(go version)\n"
        printf "\n\nGo environment:\n\n"
        go env
        printf "\n\nSystem environment:\n\n"
        env
        echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "go_cache=$(go env GOCACHE)" >> $GITHUB_OUTPUT

    - name: Cache the build cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.vars.outputs.go_cache }}
        key: ${{ runner.os }}-go-release-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-release

    # GoReleaser will take care of publishing those artifacts into the release
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v4
      with:
        version: v1.13.1
        args: release --rm-dist
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    env:
      IMAGE_REPOSITORY: ${{ github.repository }}
      VERSION: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build image
        run: docker build -t "$IMAGE_REPOSITORY" .
      - name: Build k6 binary
        run: |
            docker run --rm -u "$(id -u):$(id -g)" -v "$PWD:/xk6" \
              "$IMAGE_REPOSITORY" build master \
              --with github.com/mostafa/xk6-kafka \
              --with github.com/grafana/xk6-output-influxdb
      - name: Check k6 binary
        run: |
            ./k6 version
            ./k6 version | grep -qz 'xk6-output-influxdb.*xk6-kafka'

      - name: Log into ghcr.io
        if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
        run: |
          # Log into GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Publish master image to ghcr.io
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          echo "Publish as ghcr.io/$IMAGE_REPOSITORY:$VERSION"
          docker tag "$IMAGE_REPOSITORY" "ghcr.io/$IMAGE_REPOSITORY:master"
          docker push "ghcr.io/$IMAGE_REPOSITORY:master"

      - name: Publish tagged version image to ghcr.io
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          VERSION="${VERSION#v}"
          echo "Publish as ghcr.io/${IMAGE_REPOSITORY}:${VERSION}"
          docker tag "$IMAGE_REPOSITORY" "ghcr.io/${IMAGE_REPOSITORY}:${VERSION}"
          docker push "ghcr.io/${IMAGE_REPOSITORY}:${VERSION}"
          # We also want to tag the latest stable version as latest
          if [[ ! "$VERSION" =~ (RC|rc) ]]; then
            echo "Publish as ghcr.io/${IMAGE_REPOSITORY}:latest"
            docker tag "$IMAGE_REPOSITORY" "ghcr.io/${IMAGE_REPOSITORY}:latest"
            docker push "ghcr.io/${IMAGE_REPOSITORY}:latest"
          fi
